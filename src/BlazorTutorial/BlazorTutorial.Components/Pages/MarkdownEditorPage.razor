@page "/{Lang}/markdowneditor"
@page "/markdowneditor"

@using BlazorTutorial.Core.StateHandling
@using Markdig
@using System.Text.RegularExpressions
@using System.Web
@using System.Text.Json

@inject IStringLocalizer<Resource> Localizer
@inject ApplicationState ApplicationState
@inject HttpClient Http
@inject NavigationManager NavigationManager

<MudSelect T="string" Label="@Localizer["i18n_Choose_Markdown_To_Edit"]" ValueChanged="SetEditValues">
    @foreach (var item in itemList)
    {
        <MudSelectItem T="string" Value="item.Key">@item.Value</MudSelectItem>
    }

</MudSelect>

<MudTextField T="string" Label="@Localizer["i18n_Mark_Down_Editor_Input"]" Variant="Variant.Text" @bind-Value="Body" Lines="5" Class="mark-down-input" />

<div class="mark-down-viewer">  
    @((MarkupString) Markdown.ToHtml(Body))
</div>

<br />
<MudTextField @bind-Value="text" Label="@Localizer["i18n_Mark_Down_Text"]" Variant="Variant.Text"></MudTextField>
<br />
<MudTextField @bind-Value="path" Label="@Localizer["i18n_Menu_Path"]" Variant="Variant.Text"></MudTextField>
<br />
<MudTextField @bind-Value="filename" Label="@Localizer["i18n_Mark_Down_Name"]" Variant="Variant.Text"></MudTextField>
<br />
<MudCheckBox @bind-Checked="@isSecured">@Localizer["i18n_Is_Secured"]</MudCheckBox>
<br />
<MudButton Variant="Variant.Filled" Color="Color.Tertiary" OnClick="Save">@Localizer["i18n_Save"]</MudButton>

<br />
<br />
<MudExpansionPanels>
    <MudExpansionPanel Text="@menuHeader">
        
        <pre>
            @((MarkupString)menuItemsJsonStringFormatted)
</pre>    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    [Parameter]
    public string Lang{ get; set; }

    public string Body { get; set; } = "";

    private List<KeyValuePair<string, string>> itemList = new List<KeyValuePair<string, string>>();

    private List<MenuItem> menuItems = new List<MenuItem>();

    private string filename;

    private string path;

    private string text;

    private string menuItemsJsonStringFormatted;

    private string menuHeader;

    private bool isSecured;

    protected override async Task OnInitializedAsync()
    {
        menuHeader = $"{Localizer["i18n_Actual_Menu"]} {Localizer["i18n_For_Menu_Path"]}";

        var menuItemsJsonString = await Http.GetStringAsync("https://blazortutorialbackendfunctions.azurewebsites.net/api/DownloadMarkdownFile/menu.json");

        var temp = await Http.GetFromJsonAsync<MenuItem[]>("https://blazortutorialbackendfunctions.azurewebsites.net/api/DownloadMarkdownFile/menu.json");

        menuItems = temp.ToList();

        itemList = menuItems
            .Where(m => m.MarkDownFileName != "" && m.MarkDownFileName != null || m.Children.Any(c => c.MarkDownFileName != "" && m.MarkDownFileName != null))
            .Select(m => new KeyValuePair<string,string>(m.Identifier, m.Text))
            .ToList();

        menuItemsJsonStringFormatted = Regex.Replace(HttpUtility.HtmlEncode(@menuItemsJsonString), "\r?\n|\r", "<br />");

        await base.OnInitializedAsync();
    }

    protected async Task Save()
    {
        // Upload markdown file
        MultipartFormDataContent content = new MultipartFormDataContent();

        var fileContent = new ByteArrayContent(Encoding.UTF8.GetBytes(Body));

        content.Add(fileContent, "File", $"{filename}.md");

        await Http.PostAsync("https://blazortutorialbackendfunctions.azurewebsites.net/api/UploadMarkdownFile", content);

        // Handle menu items

        var menuItems = await Http.GetFromJsonAsync<MenuItem[]>("https://blazortutorialbackendfunctions.azurewebsites.net/api/DownloadMarkdownFile/menu.json");

        var menuItemsList = menuItems.ToList();

        var pathParts = path.Split('/');

        var numberOfParts = pathParts.Length;

        if (numberOfParts > 2)
        {
            throw new Exception("Too many parts of menu path");
        }

        filename = $"{filename}.md";

        var existingMenuItem = menuItemsList.FirstOrDefault(m => m.Link == pathParts[0]);

        // Child item exiting
        if (existingMenuItem != null)
        {
            // File is child item
            if (numberOfParts == 2)
            {
                // Child items existing
                if (existingMenuItem.Children.Any())
                {
                    MenuItem existingChild = null;

                    foreach (var child in existingMenuItem.Children)
                    {
                        if (child.Link == pathParts[1])
                        {
                            existingChild = child;
                        }
                    }

                    // Update existing child item
                    if (existingChild != null)
                    {
                        existingChild.MarkDownFileName = filename;
                    }
                    // Add new child item
                    else
                    {
                        existingMenuItem.Children.Add(new MenuItem
                            {
                                IconName = "arrowRight",
                                Children = new List<MenuItem>(),
                                Link = pathParts[1],
                                MarkDownFileName = filename,
                                Text = text,
                                Identifier = Guid.NewGuid().ToString()
                            });
                    }

                }
                // No child items existing, add new child item
                else
                {
                    existingMenuItem.Children = new List<MenuItem> {
                                                                         new MenuItem
                                                                             {
                                                                                 IconName = "arrowRight",
                                                                                 Children = new List<MenuItem>(),
                                                                                 Link = pathParts[1],
                                                                                 MarkDownFileName = filename,
                                                                                 Text = text,
                                                                                 Identifier = Guid.NewGuid().ToString()
                                                                             }
                                                                     };
                }
            }
            else
            {
                existingMenuItem.MarkDownFileName = filename;

                existingMenuItem.Text = text;
            }
        }
        else
        {
            // File is child item
            if (numberOfParts == 2)
            {
                // Add top level menu item as parent
                menuItemsList.Add(new MenuItem
                                      {
                                          Children = new List<MenuItem>{
                                                                           // Add child item
                                                                           new MenuItem
                                                                            {
                                                                                IconName = "arrowRight",
                                                                                Children = new List<MenuItem>(),
                                                                                Link = pathParts[1],
                                                                                MarkDownFileName = filename,
                                                                                Text = text,
                                                                                Identifier = Guid.NewGuid().ToString()
                                                                            }},
                                          IconName = "arrowRight",
                                          Link = pathParts[0],
                                          MarkDownFileName = string.Empty,
                                          Text = pathParts[0],
                                          Identifier = Guid.NewGuid().ToString()
                                      });
            }
            // File is top level item
            else
            {
                menuItemsList.Add(new MenuItem
                                      {
                                          Children = new List<MenuItem>(),
                                          IconName = "arrowRight",
                                          Link = pathParts[0],
                                          MarkDownFileName = filename,
                                          Text = text,
                                          Identifier = Guid.NewGuid().ToString()
                                      });
            }


        }

        var json = JsonSerializer.Serialize(menuItemsList);

        content = new MultipartFormDataContent();

        fileContent = new ByteArrayContent(Encoding.UTF8.GetBytes(json));

        content.Add(fileContent, "File", "menu.json");

        await Http.PostAsync("https://blazortutorialbackendfunctions.azurewebsites.net/api/UploadMarkdownFile", content);

        ApplicationState.GlobalNotification.Add(@Localizer["i18n_Saved_Successfully"]);

        await Task.Delay(1500);

        NavigationManager.NavigateTo("menueditor", true);
    }

    private async Task SetEditValues(string identifier)
    {
        var item = new MenuItem();

        foreach (var menuItem in menuItems)
        {
            if (menuItem.Identifier == identifier)
            {
                item = menuItem;

                break;
            }
            else
            {
                foreach (var menuItemChild in menuItem.Children)
                {
                    if (menuItemChild.Identifier == identifier)
                    {
                        item = menuItemChild;

                        break;
                    }

                }

                if (item.Identifier == identifier)
                {
                    break;
                }
            }
        }

        Body = await Http.GetStringAsync($"https://blazortutorialbackendfunctions.azurewebsites.net/api/DownloadMarkdownFile/{item.MarkDownFileName}");

        var extension = System.IO.Path.GetExtension(item.MarkDownFileName);

        filename = item.MarkDownFileName.Substring(0, item.MarkDownFileName.Length - extension.Length);

        path = item.Link;

        text = item.Text;

        isSecured = item.IsSecured;
    }

}