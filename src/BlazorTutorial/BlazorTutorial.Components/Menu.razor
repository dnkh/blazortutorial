@using Microsoft.JSInterop
@using System.Globalization
@using System.Net.Http.Json
@using BlazorTutorial.Components.Classes
@using Microsoft.AspNetCore.Components.Routing
@inject NavigationManager NavManager;
@inject IJSRuntime JSRuntime;
@inject HttpClient Http

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Blazor-Tutorial</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        @if (menuItems != null)
        {
            @foreach (var menuitem in menuItems)
            {
                    @if (menuitem.Children.Any())
                    {
                        <li class="nav-item px-3">
                            <NavLink class="nav-link" href="@(!string.IsNullOrWhiteSpace(menuitem.Link) ? $"{Lang}/{menuitem.Link}" : Lang)" Match="NavLinkMatch.All">
                                <span class="oi @menuitem.IconName" aria-hidden="true"></span> @menuitem.Text
                            </NavLink>
                        </li>
                        <ul>
                            @foreach (var childMenuItem in menuitem.Children)
                            {
                                <li class="nav-item px-3">
                                    <NavLink class="nav-link" href="@(!string.IsNullOrWhiteSpace(childMenuItem.Link) ? $"{Lang}/{childMenuItem.Link}" : Lang)" Match="NavLinkMatch.All">
                                        <span class="oi @childMenuItem.IconName" aria-hidden="true"></span> @childMenuItem.Text
                                    </NavLink>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <li class="nav-item px-3">
                            <NavLink class="nav-link" href="@(!string.IsNullOrWhiteSpace(menuitem.Link) ? $"{Lang}/{menuitem.Link}" : Lang)" Match="NavLinkMatch.All">
                                <span class="oi @menuitem.IconName" aria-hidden="true"></span> @menuitem.Text
                            </NavLink>
                        </li>
                    }
            }
        }
        <li class="px-4 ms-auto  align-bottom">
            <div class="list-inline">
                <a href="" class="list-inline-item" @onclick="@(() => SetLanguage("en"))" @onclick:preventDefault>
                    <span class="flag-icon flag-icon-gbr"></span>
                </a>
                <a href="" class="list-inline-item" @onclick="@(() => SetLanguage("de"))" @onclick:preventDefault>
                    <span class="flag-icon flag-icon-deu"></span>
                </a>
            </div>
        </li>
    </ul>
</div>

@code {
    [Parameter]
    public string Lang { get; set; }

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private MenuItem[] menuItems;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            menuItems = await Http.GetFromJsonAsync<MenuItem[]>("https://blazortutorialbackendfunctions.azurewebsites.net/api/DownloadMarkdownFile/menu.json");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private void SetLanguage(string lang)
    {
        if (CultureInfo.CurrentCulture != new CultureInfo(lang))
        {
            var js = (IJSInProcessRuntime)JSRuntime;
            js.InvokeVoid("blazorCulture.set", lang);
            NavManager.NavigateTo($"/{lang}", forceLoad: true);
        }
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}