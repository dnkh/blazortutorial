@inject HttpClient Http
@inject ILanguageService languageService;
@inject IStringLocalizer<Resource> Localizer
@inject NavigationManager navigationManager

<MudNavMenu>
    <MudText Typo="Typo.h6" Class="px-4">
        Blazor-Tutorial
    </MudText>
    <MudText  Class="px-4">
        @version
    </MudText>
    <MudDivider Class="my-2"/>
    @if (menuItems != null)
    {
        @foreach (var menuItem in menuItems)
        {
            @if (menuItem.Children.Any())
            {
                <MudNavGroup Title="@Localizer[menuItem.Text]" Expanded="false" Icon="@this.GetIcon(menuItem.IconName)">
                    @foreach (var childMenuItem in menuItem.Children)
                    {
                        var url = childMenuItem.Link.Contains("http") ? childMenuItem.Link : languageService.GetLanguageUrl(this.Lang, childMenuItem.Link);

                        url = !string.IsNullOrWhiteSpace(childMenuItem.MarkDownFileName) ? $"{languageService.GetLanguageUrl(this.Lang, "genericmarkdowneditor")}?markdownName={childMenuItem.MarkDownFileName}" : url;

                        <MudNavLink Href="@url" Match="NavLinkMatch.All" Icon="@this.GetIcon(childMenuItem.IconName)">
                             @Localizer[childMenuItem.Text]
                        </MudNavLink>
                    }
                </MudNavGroup>
            }
            else
            {
                var url = menuItem.Link.Contains("http") ? menuItem.Link : languageService.GetLanguageUrl(this.Lang, menuItem.Link);

                url = !string.IsNullOrWhiteSpace(menuItem.MarkDownFileName) ? $"{languageService.GetLanguageUrl(this.Lang, "genericmarkdowneditor")}?markdownName={menuItem.MarkDownFileName}" : url;

                <MudNavLink Href="@url" ForceLoad="true" Match="NavLinkMatch.Prefix" Icon="@this.GetIcon(menuItem.IconName)">
                    @Localizer[menuItem.Text]
                </MudNavLink>
            }
        }
    }
</MudNavMenu>

@code {
    [Parameter]
    public string Lang { get; set; }

    private MenuItem[] menuItems;

    private string version;

    protected override async Task OnInitializedAsync()
    {
        version = await Http.GetStringAsync("assets/version.txt");

        menuItems = await Http.GetFromJsonAsync<MenuItem[]>("https://blazortutorialbackendfunctions.azurewebsites.net/api/DownloadMarkdownFile/menu.json");
    }

    private string GetIcon(string navIcon)
        => navIcon switch
        {
            "wrench" => Icons.Filled.Build,
            "pencil" => Icons.Filled.Edit,
            "assignment" => Icons.Filled.Assignment,
            "mudblazor" => Icons.Custom.Brands.MudBlazor,
            "grid" => Icons.Filled.GridOn,
            "question" => Icons.Filled.QuestionMark,
            "book" => Icons.Filled.Book,
            "play-circle" => Icons.Filled.PlayCircle,
            "home" => Icons.Filled.Home,
            "functions" => Icons.Filled.Bolt,
            "arrowRight" => Icons.Filled.ArrowRight,
            "deletesweep" => Icons.Filled.DeleteSweep,
            "lock" => Icons.Filled.Lock,
            _ => string.Empty
        };
}