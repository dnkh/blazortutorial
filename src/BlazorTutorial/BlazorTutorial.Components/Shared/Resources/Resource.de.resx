<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="i18n_Actual_Menu" xml:space="preserve">
    <value>Aktuelles Menu</value>
  </data>
  <data name="i18n_Always_Last_Active_Site" xml:space="preserve">
    <value>Es wird immer die zuletzt geöffnete Seite beim Start geladen</value>
  </data>
  <data name="i18n_Button_Load" xml:space="preserve">
    <value>Laden</value>
  </data>
  <data name="i18n_Choose_Items_To_Delete" xml:space="preserve">
    <value>Wähle die Menueinträge, die Du löschen möchtest</value>
  </data>
  <data name="i18n_Choose_Markdown_To_Edit" xml:space="preserve">
    <value>Wähle die Seite zum Bearbeiten</value>
  </data>
  <data name="i18n_cookie_handling" xml:space="preserve">
    <value>Die letzte besuchte Seite wird beim erneuten Seitenaufruf geöffnet.&lt;br /&gt;Hierzu werden die Cookies der Seite über einen&lt;a class="link" href="https://blazor-university.com/javascript-interop/"&gt;Blazor Interop&lt;/a&gt; Call abgerufen.&lt;br /&gt;Zum Testen löscht man einfach die Cookies der Seite, schließt den Browser und landet auf der Startseite.&lt;br /&gt;Navigiert man nun zu einer anderen Seite, schließt den Browser&lt;br /&gt;und öffnet ihn erneut, so wird man zur zuletzt besuchten Seite weitergeleitet.</value>
  </data>
  <data name="i18n_Delete" xml:space="preserve">
    <value>Löschen</value>
  </data>
  <data name="i18n_Deleted_Successfully" xml:space="preserve">
    <value>Erfolgreich gelöscht, es wird neu geladen</value>
  </data>
  <data name="i18n_For_Menu_Path" xml:space="preserve">
    <value>(für Menupfad bitte die jeweiligen "Link"-Einträge verwenden)</value>
  </data>
  <data name="i18n_Get_Details" xml:space="preserve">
    <value>Erfahre mehr</value>
  </data>
  <data name="i18n_Greeting" xml:space="preserve">
    <value>Hallo</value>
  </data>
  <data name="i18n_Hide_Loading_Animation" xml:space="preserve">
    <value>Verberge Ladeanimation</value>
  </data>
  <data name="i18n_loading_animation" xml:space="preserve">
    <value>Die Ladeanimation ist als Overlay mit einer Standardanimation im Menu angelegt&lt;br /&gt;und kann so von jeder Seite aus genutzt werden, ohne die Animation jedes Mal erneut einbinden zu müssen.</value>
  </data>
  <data name="i18n_Mark_Down_Editor_Input" xml:space="preserve">
    <value>Markdown text hier eingeben</value>
  </data>
  <data name="i18n_Mark_Down_Name" xml:space="preserve">
    <value>Markdown Dateiname (ohne Endung) - Muss eindeutig sein, da sonst überschrieben wird</value>
  </data>
  <data name="i18n_Mark_Down_Text" xml:space="preserve">
    <value>Anzeigename Menu</value>
  </data>
  <data name="i18n_Menu_Editor_Description" xml:space="preserve">
    <value>Hier können die Menueinträge gelöscht werden</value>
  </data>
  <data name="i18n_Menu_Path" xml:space="preserve">
    <value>Menupfad (Trennung durch Slash, maximal 2 Ebenen, z.B. "components/test")</value>
  </data>
  <data name="i18n_MudBlazor_Table_Header_MolarMass" xml:space="preserve">
    <value>Molmasse</value>
  </data>
  <data name="i18n_MudBlazor_Table_Header_Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="i18n_MudBlazor_Table_Header_Number" xml:space="preserve">
    <value>Nummer</value>
  </data>
  <data name="i18n_MudBlazor_Table_Header_Position" xml:space="preserve">
    <value>Position</value>
  </data>
  <data name="i18n_MudBlazor_Table_Header_Sign" xml:space="preserve">
    <value>Zeichen</value>
  </data>
  <data name="i18n_MudBlazor_Table_RowsPerPage" xml:space="preserve">
    <value>Zeile pro Seite</value>
  </data>
  <data name="i18n_MudBlazor_Table_Title" xml:space="preserve">
    <value>Daten</value>
  </data>
  <data name="i18n_NavMenu_MarkDown_Components" xml:space="preserve">
    <value>Komponente</value>
  </data>
  <data name="i18n_NavMenu_MarkDown_MarkDownEditor" xml:space="preserve">
    <value>Mark Down Editor</value>
  </data>
  <data name="i18n_NavMenu_MarkDown_MarkDownViewer" xml:space="preserve">
    <value>Mark Down Viewer</value>
  </data>
  <data name="i18n_NavMenu_MarkDown_MudBlazor" xml:space="preserve">
    <value>MudBlazor</value>
  </data>
  <data name="i18n_NavMenu_MarkDown_MudBlazorTable" xml:space="preserve">
    <value>Tabelle</value>
  </data>
  <data name="i18n_notification" xml:space="preserve">
    <value>Die Benachrichtigung ist über einen Applicationstate umgesetzt.&lt;br /&gt;Hierbei wird eine Klasse zentral über die Dependency Injection eingebunden&lt;br /&gt;und dann aus mehreren Komponenten heraus als zentraler Ansprechpunkt verwendet.&lt;br /&gt;Das Konzept ähnelt stark dem von &lt;a class="link" href="https://redux.js.org/"&gt;Redux&lt;/a&gt;.</value>
  </data>
  <data name="i18n_Notification_Example" xml:space="preserve">
    <value>Benachrichtigungsbeispiel über zentralen State</value>
  </data>
  <data name="i18n_Press_Button_Load" xml:space="preserve">
    <value>Button drücken zum Laden</value>
  </data>
  <data name="i18n_Save" xml:space="preserve">
    <value>Speichern</value>
  </data>
  <data name="i18n_Saved_Successfully" xml:space="preserve">
    <value>Erfolgreich gespeichert, es wird neu geladen</value>
  </data>
  <data name="i18n_Secured_Page" xml:space="preserve">
    <value>Diese Seite ist nur nach Authorisierung am bridging-IT-Tenant abrufbar, da sie mit deinem Authorize-Atrribute versehen wurde.</value>
  </data>
  <data name="i18n_Setting" xml:space="preserve">
    <value>Dies ist ein ausgelesener Setting-Wert</value>
  </data>
  <data name="i18n_settings" xml:space="preserve">
    <value>Die Application Settings werden über einen Service direkt aus der über die Depenendy Injection zur Verfügung gestellten IConfiguration gelesen und typisiert ausgegeben.</value>
  </data>
  <data name="i18n_Show_Loading_Animation" xml:space="preserve">
    <value>Zeige Ladeanimation</value>
  </data>
  <data name="i18n_Show_Notification" xml:space="preserve">
    <value>Zeige Benachrichtigung</value>
  </data>
</root>